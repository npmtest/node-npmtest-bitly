{"/home/travis/build/npmtest/node-npmtest-bitly/test.js":"/* istanbul instrument in package npmtest_bitly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bitly/lib.npmtest_bitly.js":"/* istanbul instrument in package npmtest_bitly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bitly = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bitly = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bitly/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bitly && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bitly */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bitly\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bitly.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bitly.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bitly.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bitly.__dirname + '/lib.npmtest_bitly.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bitly/node_modules/bitly/lib/bitly.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _url = require('url');\n\nvar _validUrl = require('valid-url');\n\nvar _boom = require('boom');\n\nrequire('isomorphic-fetch');\n\nvar Bitly = (function () {\n\n  /**\n   * The main Bitly constructor, takes the users login, api key and additional options\n   * @constructor\n   * @param {String} accessToken OAuth access token\n   * @param {Object=} config Optional config object\n   * @returns {Bitly}\n   */\n\n  function Bitly(accessToken, config) {\n    _classCallCheck(this, Bitly);\n\n    // Set up the config for requests being made with the instance of this\n    this.config = Object.assign({ access_token: accessToken }, config, {\n      format: 'json',\n      api_url: 'api-ssl.bitly.com',\n      api_version: 'v3',\n      domain: 'bit.ly'\n    });\n  }\n\n  /**\n   * Generates the URL object to be passed to the HTTP request for a specific\n   * API method call\n   * @param  {Object} query  The query object\n   * @param  {String} method The Bit.ly method to call with the request\n   * @return {Object} The URL object for this request\n   */\n\n  _createClass(Bitly, [{\n    key: 'generateNiceUrl',\n    value: function generateNiceUrl(query, method) {\n      // Make sure the access_token gets sent with every query\n      query['access_token'] = this.config.access_token;\n\n      return (0, _url.parse)((0, _url.format)({\n        protocol: 'https',\n        hostname: this.config.api_url,\n        pathname: '/' + this.config.api_version + '/' + method,\n        query: query\n      }));\n    }\n\n    /**\n     * Function to do a HTTP Get request with the current query\n     * @param  {Object} requestUri The current query object\n     * @return {Promise}\n     */\n  }, {\n    key: 'doRequest',\n    value: function doRequest(requestUri) {\n\n      return new Promise(function (resolve, reject) {\n        return fetch(requestUri).then(function (response) {\n          if (response.status >= 400) {\n            return reject((0, _boom.create)(response.status, response.statusText, response));\n          }\n          return resolve(response.json());\n        });\n      });\n    }\n\n    /**\n     * Function to check through an array of items to check for short urls or hashes\n     * @param  {Array} items The array of items to be checked\n     * @param  {Object} query The query object\n     * @return {void}\n    */\n  }, {\n    key: 'sortUrlsAndHash',\n    value: function sortUrlsAndHash(items, query) {\n      var shortUrl = [];\n      var hash = [];\n\n      // If only passed one item, put in array for url checking\n      if (typeof items === 'string') {\n        items = [items];\n      }\n      items.forEach(function (item) {\n        (0, _validUrl.isUri)(item) ? shortUrl.push(item) : hash.push(item);\n      });\n\n      if (shortUrl.length > 0) {\n        query.shortUrl = shortUrl;\n      }\n      if (hash.length > 0) {\n        query.hash = hash;\n      }\n    }\n\n    /**\n     * Request to shorten one long url\n     * @param  {String} longUrl The URL to be shortened\n     * @param  {String=} domain The domain to use (optional)\n     * @return {Promise}\n     */\n  }, {\n    key: 'shorten',\n    value: function shorten(longUrl, domain) {\n      var query = {\n        format: this.config.format,\n        longUrl: longUrl,\n        domain: domain ? domain : this.config.domain\n      };\n\n      return this.doRequest(this.generateNiceUrl(query, 'shorten'));\n    }\n\n    /**\n     * Request to expand a single short url, short hash or mixed array or items\n     * @param  {String|Array} items  The string or array of short urls and/or hashes to expand\n     * @return {Promise}\n     */\n  }, {\n    key: 'expand',\n    value: function expand(items) {\n      var query = {\n        format: this.config.format,\n        domain: this.config.domain\n      };\n\n      this.sortUrlsAndHash(items, query);\n\n      return this.doRequest(this.generateNiceUrl(query, 'expand'));\n    }\n\n    /**\n     * Request to get clicks for a single short url, short hash or mixed array or items\n     * @param  {String|Array} items  The string or array of short urls and/or hashes to expand\n     * @return {Promise}\n     */\n  }, {\n    key: 'clicks',\n    value: function clicks(items) {\n      var query = {\n        format: this.config.format,\n        domain: this.config.domain\n      };\n\n      this.sortUrlsAndHash(items, query);\n\n      return this.doRequest(this.generateNiceUrl(query, 'clicks'));\n    }\n\n    /**\n     * Request to get clicks by minute for a single short url, short hash or mixed array or items\n     * @param  {String|Array} items  The string or array of short urls and/or hashes to expand\n     * @return {Promise}\n     */\n  }, {\n    key: 'clicksByMinute',\n    value: function clicksByMinute(items) {\n      var query = {\n        format: this.config.format,\n        domain: this.config.domain\n      };\n\n      this.sortUrlsAndHash(items, query);\n\n      return this.doRequest(this.generateNiceUrl(query, 'clicks_by_minute'));\n    }\n\n    /**\n     * Request to get clicks by day for a single short url, short hash or mixed array or items\n     * @param  {String|Array} items  The string or array of short urls and/or hashes to expand\n     * @return {Promise}\n     */\n  }, {\n    key: 'clicksByDay',\n    value: function clicksByDay(items) {\n      var query = {\n        format: this.config.format,\n        domain: this.config.domain\n      };\n\n      this.sortUrlsAndHash(items, query);\n\n      return this.doRequest(this.generateNiceUrl(query, 'clicks_by_day'));\n    }\n\n    /**\n     * Request to get look up an existing bitly link for a long url or array of urls\n     * @param  {String|Array} links  The string or array of long urls\n     * @return {Promise}\n     */\n  }, {\n    key: 'lookup',\n    value: function lookup(links) {\n      var query = {\n        format: this.config.format,\n        url: links,\n        domain: this.config.domain\n      };\n\n      return this.doRequest(this.generateNiceUrl(query, 'lookup'));\n    }\n\n    /**\n     * Request to get clicks by day for a single short url, short hash or mixed array or items\n     * @param  {String|Array} items  The string or array of short urls and/or hashes to expand\n     * @return {Promise}\n     */\n  }, {\n    key: 'info',\n    value: function info(items) {\n      var query = {\n        format: this.config.format,\n        domain: this.config.domain\n      };\n\n      this.sortUrlsAndHash(items, query);\n\n      return this.doRequest(this.generateNiceUrl(query, 'info'));\n    }\n\n    /**\n     * Request the informations on all referrers for a short url.  This function only\n     * accepts one url (as per the limit of the bitly API)\n     * @param  {String} link The link be checked\n     * @return {Promise}\n     */\n  }, {\n    key: 'referrers',\n    value: function referrers(link) {\n      var query = {\n        format: this.config.format,\n        domain: this.config.domain\n      };\n\n      query[(0, _validUrl.isUri)(link) ? 'shortUrl' : 'hash'] = link;\n\n      return this.doRequest(this.generateNiceUrl(query, 'referrers'));\n    }\n\n    /**\n     * Request the information on all countries for a short url.  This function only\n     * accepts one url (as per the limit of the bitly API)\n     * @return {Promise}\n     */\n  }, {\n    key: 'countries',\n    value: function countries(link) {\n      var query = {\n        format: this.config.format,\n        domain: this.config.domain\n      };\n\n      query[(0, _validUrl.isUri)(link) ? 'shortUrl' : 'hash'] = link;\n\n      return this.doRequest(this.generateNiceUrl(query, 'countries'));\n    }\n\n    /**\n     * Request to confirm a pro-domain it set up with bitly\n     * @param  {String} domain The domain to be checked\n     * @return {Promise}\n     */\n  }, {\n    key: 'bitlyProDomain',\n    value: function bitlyProDomain(domain) {\n      var query = {\n        format: this.config.format,\n        domain: domain\n      };\n\n      return this.doRequest(this.generateNiceUrl(query, 'bitly_pro_domain'));\n    }\n\n    /**\n     * Request entries from a user's link history in reverse chronological order\n     * @return {Promise}\n     */\n  }, {\n    key: 'history',\n    value: function history() {\n      var query = {\n        // @todo Implement optional parameters:\n        //   http://dev.bitly.com/user_info.html#v3_user_link_history\n      };\n\n      return this.doRequest(this.generateNiceUrl(query, 'user/link_history'));\n    }\n\n    /**\n     * Edit an existing link's metadata\n     * @param {String|Array} metadata_field Metadata field to edit (title, note, private, user_ts or archived). To edit\n     * multiple fields, pass an array of field names as strings, e.g. ['title', 'note']\n     * @param {String} link The Bitlink to be edited (requires protocol, i.e \"example.com\" won't work but\n     *   \"http://example.com\" will)\n     * @param {String|Array} new_value The new value for the edited metadata. If you pass an array to metadata_field, you\n     * have to pass an array to new_value. The index have to match those in metadata_field, e.g. metadata_field[0] will\n     *   be\n     * changed to new_value[0] etc.\n     * @return {Promise}\n     */\n  }, {\n    key: 'linkEdit',\n    value: function linkEdit(metadata_field, link, new_value) {\n      var query = {\n        link: link\n      };\n\n      // We can use an array of fields and matching values to edit multiple metadata fields or strings to edit only a\n      // single one\n      if (Array.isArray(metadata_field) && Array.isArray(new_value)) {\n        query['edit'] = metadata_field.join(',');\n        metadata_field.forEach(function (field, index) {\n          query[field] = new_value[index];\n        });\n      } else {\n        query['edit'] = metadata_field;\n        query[metadata_field] = new_value;\n      }\n\n      return this.doRequest(this.generateNiceUrl(query, 'user/link_edit'));\n    }\n  }]);\n\n  return Bitly;\n})();\n\nexports['default'] = Bitly;\nmodule.exports = exports['default'];\n//# sourceMappingURL=bitly.js.map"}